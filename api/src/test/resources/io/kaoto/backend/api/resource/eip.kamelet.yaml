apiVersion: camel.apache.org/v1alpha1
kind: Kamelet
metadata:
  annotations:
    camel.apache.org/kamelet.icon: whatever
    kaoto.io/description: Used to test all EIP we implement
  labels:
    camel.apache.org/kamelet.type: action
  name: eip-action
spec:
  definition:
    description: Used to test all EIP we implement
    properties: {}
    title: EIP Kamelet
  dependencies:
  - camel:core
  - camel:kamelet
  template:
    from:
      uri: kamelet:source
      steps:
      - transacted:
          ref: required
      - loop:
          constant: '3'
          copy: true
          steps:
          - saga:
              propagation: MANDATORY
              completion-mode: MANUAL
              compensation:
                uri: direct:compensation
              completion:
                uri: direct:completion
              option:
              - key: o1
                simple: ${body}
              - key: o2
                expression:
                  simple: ${body}
              steps:
              - throttle:
                  constant: '5'
                  executor-service: myExecutor
                  async-delayed: true
                  caller-runs-when-rejected: false
                  reject-execution: true
              - sample:
                  sample-period: '1500'
                  message-frequency: 5
                  description:
                    text: Message Sampler
                    lang: eng
              - script:
                  groovy: some groovy script
          - delay:
              expression:
                simple: ${body}
              async-delayed: true
          - routing-slip:
              simple: ${body}
              uri-delimiter: '|'
      - choice:
          when:
          - simple: '{{?foo}}'
            steps:
            - dynamic-router:
                simple: ${body}
            - set-header:
                simple: foo
                name: bar
          - simple: '{{?bar}}'
            steps:
            - set-property:
                simple: bar
                name: property
            - threads:
                pool-size: 8
            - split:
                tokenize: ','
                steps:
                - remove-property:
                    name: property
            - marshal:
                json:
                  library: Gson
            - wire-tap:
                uri: direct:infiniteandbeyond
                parameters:
                  failIfNoConsumers: false
                  block: false
          - simple: '{{?baz}}'
            steps:
            - recipient-list:
                constant: direct:a,direct:b
                parallel-processing: true
                stop-on-exception: true
            - remove-headers:
                pattern: toRemove
                exclude-pattern: toExclude
            - resequence:
                simple: ${in.header.seqnum}
                stream-config:
                  capacity: '5000'
                  timeout: '4000'
                steps:
                - transform:
                    simple: baz
                - remove-properties:
                    pattern: toRemove
                    exclude-pattern: toExclude
            - aggregate:
                correlation-expression:
                  simple: ${header.StockSymbol}
                aggregation-strategy: myAggregatorStrategy
                completion-size: 2
            - load-balance:
                weighted:
                  distribution-ratio: 2,1
                  round-robin: false
                steps:
                - log:
                    message: test
                    logging-level: INFO
                    log-name: yaml
                - service-call:
                    name: sc
                    static-service-discovery:
                      servers:
                      - service1@host1
                      - service1@host2
                    blacklist-service-filter:
                      servers:
                      - service2@host1
          otherwise:
            steps:
            - remove-header:
                name: removeme
            - claim-check:
                operation: Push
                key: foo
                filter: header:(foo|bar)
            - rollback:
                mark-rollback-only: true
                message: test
            - throw-exception:
                message: test
                exception-type: java.lang.IllegalArgumentException
            - stop: {}
      - filter:
          simple: '{{?foo}}'
          steps:
          - set-body:
              simple: abc
          - unmarshal:
              json:
                unmarshal-type-name: MyClass
          - set-exchange-pattern: InOut
          - circuit-breaker:
              description:
                text: Another one
                lang: eng
              steps:
              - enrich:
                  expression:
                    simple: ${body}
              - to:
                  uri: dropbox:put
                  parameters:
                    accessToken: '{{accessToken}}'
              - multicast:
                  parallel-processing: true
                  stop-on-exception: true
                  steps:
                  - process:
                      ref: '{{myProcessor}}'
                  - pipeline:
                      steps:
                      - convert-body-to:
                          type: java.lang.String
                          charset: UTF8
                      - validate:
                          simple: ${body} == 100
                      - poll-enrich:
                          expression:
                            simple: ${body}
                          aggregation-strategy: myStrategy
              on-fallback:
                steps:
                - log:
                    message: test
                    logging-level: INFO
                    log-name: yaml
                - idempotent-consumer:
                    simple: ${header.id}
                    idempotent-repository: myRepo
                    steps:
                    - set-body:
                        simple: ola ke ase
          - sort:
              comparator: myComparator
      - do-try:
          steps:
          - set-body:
              simple: abc
          - set-exchange-pattern: InOut
          do-catch:
          - exception:
            - java.io.FileNotFoundException
            - java.io.IOException
            on-when:
              simple: ${body.size()} == 1
            steps:
            - log:
                message: test
                logging-level: INFO
                log-name: yaml
          do-finally:
            steps:
            - enrich:
                expression:
                  simple: ${body}
            - to-d:
                uri: direct
                parameters:
                  name: start
