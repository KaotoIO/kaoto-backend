<?xml version="1.0"?>
<project
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>io.kaoto.backend</groupId>
        <artifactId>parent</artifactId>
        <version>1.3.0</version>
    </parent>
    <artifactId>api</artifactId>
    <version>1.3.0</version>

    <properties>
        <kaoto.runtime.type>jvm</kaoto.runtime.type>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-config-yaml</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-health</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.kaoto.backend</groupId>
            <artifactId>model</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>io.kaoto.backend</groupId>
            <artifactId>metadata</artifactId>
        </dependency>
        <dependency>
            <groupId>io.kaoto.backend</groupId>
            <artifactId>services-interfaces</artifactId>
        </dependency>
        <dependency>
            <groupId>io.kaoto.backend</groupId>
            <artifactId>cluster</artifactId>
        </dependency>
        <dependency>
            <groupId>io.kaoto.backend</groupId>
            <artifactId>api-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-openapi</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-test-kubernetes-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-hibernate-validator</artifactId>
        </dependency>
    </dependencies>

    <build>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
            </extension>
        </extensions>
    </build>

    <profiles>
        <!-- placeholder profile for jvm specific flags when building the container image -->
        <profile>
            <id>jvm</id>
            <activation>
                <property>
                    <name>!native</name>
                </property>
            </activation>
        </profile>
        <profile>
            <id>native</id>
            <activation>
                <property>
                    <name>native</name>
                </property>
            </activation>
            <properties>
                <quarkus.package.type>native</quarkus.package.type>
                <kaoto.runtime.type>native</kaoto.runtime.type>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <native.image.path>
                                            ${project.build.directory}/${project.build.finalName}-runner</native.image.path>
                                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                                        <maven.home>${maven.home}</maven.home>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>swagger-ui</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.smallrye</groupId>
                        <artifactId>smallrye-open-api-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>compile</phase>
                                <goals>
                                    <goal>generate-schema</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <outputDirectory>${project.basedir}/src/main/resources/api.yaml</outputDirectory>
                            <includeDependenciesScopes>compile,provided,system,test,import</includeDependenciesScopes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>io.swagger.codegen.v3</groupId>
                        <artifactId>swagger-codegen-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>compile</phase>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                                <configuration>
                                    <inputSpec>
                                        ${project.basedir}/src/main/resources/api.yaml/openapi.json</inputSpec>
                                    <language>html2</language>
                                    <output>/tmp/api/</output>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>container-image</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>container-image</name>
                </property>
            </activation>

            <properties>
                <!--
                    This allows to build a native executable without having to install
                    GraalVM which also allow to use the right version that quarkus is
                    tested against.

                    https://quarkus.io/guides/building-native-image#container-runtime
                -->
                <quarkus.native.container-build>true</quarkus.native.container-build>

                <quarkus.container-image.build>true</quarkus.container-image.build>
                <quarkus.container-image.group>kaotoio</quarkus.container-image.group>
                <quarkus.container-image.name>backend</quarkus.container-image.name>

                <quarkus.container-image.tag>latest-${kaoto.runtime.type}-${os.detected.arch}</quarkus.container-image.tag>
                <quarkus.container-image.additional-tags>
                    ${git.branch}-${git.commit.id.abbrev}-${kaoto.runtime.type}-${os.detected.arch}</quarkus.container-image.additional-tags>
            </properties>

            <dependencies>
                <dependency>
                    <groupId>io.quarkus</groupId>
                    <artifactId>quarkus-container-image-docker</artifactId>
                </dependency>
            </dependencies>
        </profile>

        <profile>
            <id>standalone</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>standalone</name>
                </property>
            </activation>


            <properties>
                <kaoto.ui.branch>main</kaoto.ui.branch>
                <quarkus.container-image.name>standalone</quarkus.container-image.name>

                <quarkus.quinoa>true</quarkus.quinoa>

                <quarkus.quinoa.package-manager-install>true</quarkus.quinoa.package-manager-install>
                <quarkus.quinoa.package-manager-install.node-version>${node.version}</quarkus.quinoa.package-manager-install.node-version>
                <quarkus.quinoa.package-manager-install.yarn-version>${yarn.version}</quarkus.quinoa.package-manager-install.yarn-version>

                <quarkus.quinoa.package-manager-command.prepend-binary>true</quarkus.quinoa.package-manager-command.prepend-binary>
                <quarkus.quinoa.package-manager>yarn</quarkus.quinoa.package-manager>
                <quarkus.quinoa.package-manager-command.install>install --mode=skip-build</quarkus.quinoa.package-manager-command.install>
                <quarkus.quinoa.package-manager-command.build>workspace @kaoto/kaoto-ui run build</quarkus.quinoa.package-manager-command.build>
                <quarkus.quinoa.package-manager-command.build-env.KAOTO_API>.</quarkus.quinoa.package-manager-command.build-env.KAOTO_API>

                <quarkus.quinoa.ui-dir>${project.build.directory}/ui</quarkus.quinoa.ui-dir>
                <quarkus.quinoa.build-dir>${quarkus.quinoa.ui-dir}/packages/kaoto-ui/dist</quarkus.quinoa.build-dir>

            </properties>

            <dependencies>
                <dependency>
                    <groupId>io.quarkiverse.quinoa</groupId>
                    <artifactId>quarkus-quinoa</artifactId>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>checkout</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>git</executable>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>clone</argument>
                                        <argument>--depth=1</argument>
                                        <argument>--branch=${kaoto.ui.branch}</argument>
                                        <argument>https://github.com/KaotoIO/kaoto-ui.git</argument>
                                        <argument>--single-branch</argument>
                                        <argument>${quarkus.quinoa.ui-dir}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
</project>