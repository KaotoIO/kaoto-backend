- rest:
    path: /api/v3
    post:
    - consumes: "application/json,application/xml"
      id: addPet
      uri: /pet
      param:
      - dataType: boolean
        defaultValue: false
        description: Verbose data
        name: verbose
        required: false
        type: query
      - description: Pet object that needs to be added to the store
        name: body
        required: true
        type: body
      to:
        uri: direct:addPet
    - consumes: application/x-www-form-urlencoded
      id: updatePetWithForm
      uri: "/pet/{petId}"
      param:
      - dataType: integer
        description: ID of pet that needs to be updated
        name: petId
        required: true
        type: path
      - dataType: string
        description: Updated name of the pet
        name: name
        required: true
        type: formData
      - dataType: string
        description: Updated status of the pet
        name: status
        required: true
        type: formData
      to:
        uri: direct:updatePetWithForm
    - consumes: multipart/form-data
      produces: application/json
      id: uploadFile
      uri: "/pet/{petId}/uploadImage"
      param:
      - dataType: integer
        description: ID of pet to update
        name: petId
        required: true
        type: path
      - dataType: string
        description: Additional data to pass to server
        name: additionalMetadata
        required: true
        type: formData
      - dataType: string
        description: file to upload
        name: file
        required: true
        type: formData
      to:
        uri: direct:uploadFile
    - consumes: '*/*'
      produces: "application/xml,application/json"
      id: placeOrder
      uri: /store/order
      param:
      - description: order placed for purchasing the pet
        name: body
        required: true
        type: body
      to:
        uri: direct:placeOrder
    - consumes: '*/*'
      id: createUser
      uri: /user
      description: This can only be done by the logged in user.
      param:
      - description: Created user object
        name: body
        required: true
        type: body
      to:
        uri: direct:createUser
    - consumes: '*/*'
      id: createUsersWithArrayInput
      uri: /user/createWithArray
      param:
      - description: List of user object
        name: body
        required: true
        type: body
      to:
        uri: direct:createUsersWithArrayInput
    - consumes: '*/*'
      id: createUsersWithListInput
      uri: /user/createWithList
      param:
      - description: List of user object
        name: body
        required: true
        type: body
      to:
        uri: direct:createUsersWithListInput
    get:
    - produces: "application/xml,application/json"
      id: findPetsByStatus
      uri: /pet/findByStatus
      description: Multiple status values can be provided with comma separated strings
      param:
      - dataType: array
        description: Status values that need to be considered for filter
        name: status
        required: true
        type: query
        arrayType: string
        collectionFormat: multi
      to:
        uri: direct:findPetsByStatus
    - produces: "application/xml,application/json"
      id: findPetsByTags
      uri: /pet/findByTags
      description: Muliple tags can be provided with comma separated strings.
      param:
      - dataType: array
        description: Tags to filter by
        name: tags
        required: true
        type: query
        arrayType: string
        collectionFormat: multi
      to:
        uri: direct:findPetsByTags
    - produces: "application/xml,application/json"
      id: getPetById
      uri: "/pet/{petId}"
      description: Returns a single pet
      param:
      - dataType: integer
        description: ID of pet to return
        name: petId
        required: true
        type: path
      to:
        uri: direct:getPetById
    - produces: application/json
      id: getInventory
      uri: /store/inventory
      description: Returns a map of status codes to quantities
      to:
        uri: direct:getInventory
    - produces: "application/xml,application/json"
      id: getOrderById
      uri: "/store/order/{orderId}"
      description: For valid response try integer IDs with value >= 1 and <= 10.
      param:
      - dataType: integer
        description: ID of pet that needs to be fetched
        name: orderId
        required: true
        type: path
      to:
        uri: direct:getOrderById
    - produces: "application/xml,application/json"
      id: loginUser
      uri: /user/login
      param:
      - dataType: string
        description: The user name for login
        name: username
        required: true
        type: query
      - dataType: string
        description: The password for login in clear text
        name: password
        required: true
        type: query
      to:
        uri: direct:loginUser
    - id: logoutUser
      uri: /user/logout
      to:
        uri: direct:logoutUser
    - produces: "application/xml,application/json"
      id: getUserByName
      uri: "/user/{username}"
      param:
      - dataType: string
        description: The name that needs to be fetched. Use user1 for testing.
        name: username
        required: true
        type: path
      to:
        uri: direct:getUserByName
    delete:
    - id: deletePet
      uri: "/pet/{petId}"
      param:
      - dataType: string
        name: api_key
        required: false
        type: header
      - dataType: integer
        description: Pet id to delete
        name: petId
        required: true
        type: path
      to:
        uri: direct:deletePet
    - id: deleteOrder
      uri: "/store/order/{orderId}"
      description: For valid response try integer IDs with positive integer value.
      param:
      - dataType: integer
        description: ID of the order that needs to be deleted
        name: orderId
        required: true
        type: path
      to:
        uri: direct:deleteOrder
    - id: deleteUser
      uri: "/user/{username}"
      description: This can only be done by the logged in user.
      param:
      - dataType: string
        description: The name that needs to be deleted
        name: username
        required: true
        type: path
      to:
        uri: direct:deleteUser
    put:
    - consumes: "application/json,application/xml"
      id: updatePet
      uri: /pet
      param:
      - name: body
        required: true
        type: body
      to:
        uri: direct:updatePet
    - consumes: '*/*'
      id: updateUser
      uri: "/user/{username}"
      param:
      - dataType: string
        name: username
        required: true
        type: path
      - name: body
        required: true
        type: body
      to:
        uri: direct:updateUser
- from:
    uri: direct:updatePet
    steps:
    - log:
        message: "${body}"
