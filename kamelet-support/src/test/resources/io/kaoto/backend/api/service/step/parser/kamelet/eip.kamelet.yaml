apiVersion: camel.apache.org/v1alpha1
kind: Kamelet
metadata:
  annotations:
    camel.apache.org/kamelet.support.level: Preview
    camel.apache.org/catalog.version: main-SNAPSHOT
    camel.apache.org/kamelet.icon: whatever
    camel.apache.org/provider: Apache Software Foundation
    camel.apache.org/kamelet.group: Kaoto
  labels:
    camel.apache.org/kamelet.type: action
  name: eip-action
spec:
  definition:
    title: EIP Kamelet
    description: Used to test all EIP we implement
    properties: {}
  dependencies:
  - camel:core
  - camel:kamelet
  template:
    from:
      uri: kamelet:source
      steps:
      - transacted:
          ref: required
      - loop:
          constant: '3'
          copy: true
          steps:
          - saga:
              completion:
                uri: direct:completion
              propagation: MANDATORY
              description:
                text: SAGA powered step
                lang: eng
              compensation:
                uri: direct:compensation
              completion-mode: MANUAL
              steps:
              - to:
                  uri: direct:something
              - sample:
                  description:
                    text: Message Sampler
                    lang: eng
                  sample-period: '1500'
                  message-frequency: 5
              - script:
                  expression:
                    simple: ${body}
              timeout: '500'
              option:
              - key: o1
                simple: ${body}
              - key: o2
                expression:
                  simple: ${body}
          - delay:
              expression:
                simple: ${body}
              async-delayed: true
          - throw-exception:
              exception-type: java.lang.IllegalArgumentException
              message: test
          - routing-slip:
              simple: ${body}
              uri-delimiter: '|'
      - choice:
          when:
          - simple: '{{?foo}}'
            steps:
            - dynamic-router:
                simple: ${body}
                description:
                  text: Dynamic Routing
                  lang: eng
            - set-header:
                simple: foo
                name: bar
            - marshal:
                json:
                  library: Gson
            - threads:
                pool-size: 5
                max-pool-size: 10
                description:
                  text: Hilos
                  lang: spa
                thread-name: threads
                max-queue-size: 12
                keep-alive-time: 5
            - circuit-breaker:
                configuration: config
                description:
                  text: Test circuit breaker
                  lang: eng
                steps:
                - to:
                    uri: dropbox:put
                    parameters:
                      remotePath: '{{remotePath}}'
                      clientIdentifier: '{{clientIdentifier}}'
                      uploadMode: '{{uploadMode}}'
                - poll-enrich:
                    expression:
                      simple: ${body}
                    aggregation-strategy: myStrategy
                on-fallback:
                  steps:
                  - log:
                      message: test
                      logging-level: INFO
                      log-name: yaml
                  - convert-body-to:
                      type: java.lang.String
                      charset: UTF8
                  - wire-tap:
                      allow-optimised-components: false
                      cache-size: 23
                      auto-start-components: true
                      ignore-invalid-endpoint: false
                      copy: true
                      uri: direct:somewhere
                      parameters:
                        bridgeErrorHandler: 'true'
          - simple: '{{?bar}}'
            steps:
            - unmarshal:
                json:
                  unmarshal-type-name: MyClass
            - set-property:
                simple: bar
                name: property
            - split:
                tokenize: ','
                steps:
                - process:
                    ref: '{{myProcessor}}'
                - remove-property:
                    name: property
            - multicast:
                stop-on-exception: true
                parallel-processing: true
                steps:
                - pipeline:
                    steps:
                    - split:
                        simple: ${body}
                        steps:
                        - marshal:
                            json: {}
                - pipeline:
                    steps:
                    - claim-check:
                        operation: Get
                        key: foo
                        filter: header:(foo|bar)
          - simple: '{{?baz}}'
            steps:
            - throttle:
                simple: ${body}
                executor-service: myExecutor
                async-delayed: true
                caller-runs-when-rejected: false
                reject-execution: false
            - recipient-list:
                constant: direct:a,direct:b
                parallel-processing: true
                stop-on-exception: true
            - remove-headers:
                exclude-pattern: toExclude
                pattern: toRemove
            - validate:
                simple: ${body} == 100
            - resequence:
                simple: ${in.header.seqnum}
                stream-config:
                  capacity: '5000'
                  timeout: '4000'
                steps:
                - transform:
                    simple: baz
                - remove-properties:
                    exclude-pattern: toExclude
                    pattern: toRemove
            - load-balance:
                weighted:
                  distribution-ratio: 2,1
                  round-robin: false
                steps:
                - aggregate:
                    correlation-expression:
                      simple: ${header.StockSymbol}
                    aggregation-strategy: myAggregatorStrategy
                    completion-size: 2
                - service-call:
                    name: sc
                    static-service-discovery:
                      servers:
                      - service1@host1
                      - service1@host2
                    blacklist-service-filter:
                      servers:
                      - service2@host1
          otherwise:
            steps:
            - remove-header:
                name: removeme
            - rollback:
                mark-rollback-only: true
                message: test
            - stop: {}
      - filter:
          simple: '{{?foo}}'
          steps:
          - idempotent-consumer:
              simple: ${header.id}
              idempotent-repository: myRepo
              steps:
              - set-body:
                  simple: ola ke ase
          - sort:
              comparator: myComparator
      - do-try:
          steps:
          - set-body:
              simple: abc
          - set-exchange-pattern: InOut
          do-catch:
          - exception:
            - java.io.FileNotFoundException
            - java.io.IOException
            on-when:
              simple: ${body.size()} == 1
            steps:
            - log:
                message: test
                logging-level: INFO
                log-name: yaml
          do-finally:
            steps:
            - enrich:
                expression:
                  simple: ${body}
            - to-d:
                uri: direct
                parameters:
                  name: start
                pattern: InOptionalOut
                cache-size: 10
                ignore-invalid-endpoint: true
                allow-optimised-components: true
                auto-start-components: true
      - to:
          uri: kamelet:sink
