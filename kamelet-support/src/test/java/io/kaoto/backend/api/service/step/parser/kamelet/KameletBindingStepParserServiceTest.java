package io.kaoto.backend.api.service.step.parser.kamelet;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.kaoto.backend.api.metadata.catalog.StepCatalog;
import io.kaoto.backend.api.service.deployment.generator.kamelet.KameletBindingDeploymentGeneratorService;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.inject.Inject;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

@QuarkusTest
class KameletBindingStepParserServiceTest {

    private static String twitterSearchSourceBinding;
    private static String knativeBinding;
    private static String multiRouteBinding;

    @Inject
    private KameletBindingStepParserService service;

    @Inject
    private KameletBindingDeploymentGeneratorService deploymentService;

    private StepCatalog catalog;

    @Inject
    public void setStepCatalog(final StepCatalog catalog) {
        this.catalog = catalog;
    }

    @BeforeAll
    static void setup() throws URISyntaxException, IOException {
        twitterSearchSourceBinding = Files.readString(Path.of(
                KameletBindingStepParserServiceTest.class.getResource(
                                "twitter-search-source-binding.yaml")
                        .toURI()));
        knativeBinding = Files.readString(Path.of(
                KameletBindingStepParserServiceTest.class.getResource(
                                "knative-binding.yaml")
                        .toURI()));
        multiRouteBinding = Files.readString(Path.of(
                KameletBindingStepParserServiceTest.class.getResource(
                                "multi-route-binding.yaml")
                        .toURI()));
    }

    @BeforeEach
    void ensureCatalog() {
        catalog.waitForWarmUp().join();
    }

    @Test
    void parse() throws JsonProcessingException {
        var parsed = service.deepParse(twitterSearchSourceBinding);
        assertEquals(3, parsed.getSteps().size());
        assertEquals("twitter-search-source", parsed.getSteps().get(0).getName());
        assertEquals("aws-translate-action", parsed.getSteps().get(1).getName());
        assertEquals("knative", parsed.getSteps().get(2).getName());
        assertEquals("Kamelet Binding generated by Kaoto", parsed.getMetadata().get("name"));
        assertTrue(parsed.getParameters().isEmpty());
        var yaml = deploymentService.parse(parsed.getSteps(), parsed.getMetadata(), parsed.getParameters());
        assertThat(yaml).isEqualToNormalizingNewlines(twitterSearchSourceBinding);
    }

    @Test
    void parseMultipleFlows() throws JsonProcessingException {
        var parsed = service.getParsedFlows(multiRouteBinding);
        assertEquals(2, parsed.size());
        assertEquals("Kamelet Binding generated by Kaoto", parsed.get(0).getMetadata().get("name"));
        assertEquals("Kamelet Binding timer to log", parsed.get(1).getMetadata().get("name"));
        assertTrue(parsed.get(0).getParameters().isEmpty());
        assertTrue(parsed.get(1).getParameters().isEmpty());
        var yaml = deploymentService.parse(parsed);

        assertThat(yaml).isEqualToNormalizingNewlines(multiRouteBinding);
    }

    @Test
    void parseKnative() throws URISyntaxException, IOException {
        var parsed = service.deepParse(knativeBinding);
        assertEquals(2, parsed.getSteps().size());
        var yaml = deploymentService.parse(parsed.getSteps(), parsed.getMetadata(), parsed.getParameters());

        assertThat(yaml).isEqualToNormalizingNewlines(knativeBinding);
    }

    @Test
    void appliesTo() {
        assertTrue(service.appliesTo(twitterSearchSourceBinding));
        assertFalse(service.appliesTo("whatever"));
    }
}
